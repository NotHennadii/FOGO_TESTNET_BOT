#!/usr/bin/env python3
"""
FOGO Network Bot - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞

–ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ swap –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ—Ç–∏ FOGO
"""

import asyncio
import sys
import platform
import logging
import os
import aiohttp
from colorama import init, Fore, Style

# –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è aiohttp –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Windows
os.environ['AIOHTTP_NO_EXTENSIONS'] = '1'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º colorama
init(autoreset=True)

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å EventLoop –Ω–∞ Windows
if platform.system() == "Windows":
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SelectorEventLoop –¥–ª—è Windows (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è aiodns)
    if sys.version_info >= (3, 8):
        try:
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        except AttributeError:
            # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
            pass
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Windows
    os.environ['PYTHONASYNCIODEBUG'] = '0'

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π
from config import VERSION
from utils import (
    load_keypairs_from_file, load_proxies, validate_input_params, 
    print_banner, get_platform_connector_settings, create_safe_connector
)
from network import verify_fogo_connection, check_wallets_balance
from airdrop import request_multiple_airdrops
from worker import run_multiple_workers, print_final_statistics
from transaction import get_transaction_type

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='[%(levelname)s] %(message)s', 
    level=logging.INFO,
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


def get_user_configuration():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"{Fore.CYAN}=== FOGO BOT CONFIGURATION ==={Style.RESET_ALL}")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏
    use_proxies = input("Use proxies? (y/n): ").strip().lower() == 'y'
    check_balances = input("Check wallet balances first? (y/n): ").strip().lower() == 'y'
    request_airdrops = input("Request airdrops for empty wallets? (y/n): ").strip().lower() == 'y'
    
    print(f"\n{Fore.YELLOW}=== SWAP CONFIGURATION ==={Style.RESET_ALL}")
    try:
        num_swaps = int(input("Enter number of swaps per wallet: "))
        min_delay = float(input("Enter min delay between swaps (seconds): "))
        max_delay = float(input("Enter max delay between swaps (seconds): "))
    except ValueError as e:
        logger.error(f"Invalid input: {e}")
        return None
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if not validate_input_params(num_swaps, min_delay, max_delay):
        return None
    
    return {
        'use_proxies': use_proxies,
        'check_balances': check_balances,
        'request_airdrops': request_airdrops,
        'num_swaps': num_swaps,
        'min_delay': min_delay,
        'max_delay': max_delay
    }


async def setup_network_connection():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏"""
    logger.info(f"{Fore.CYAN}üîó Verifying FOGO testnet connection...{Style.RESET_ALL}")
    
    # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
    connector = None
    
    # –°–ø–æ—Å–æ–± 1: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
    try:
        connector = create_safe_connector()
        logger.debug("Created safe connector successfully")
    except Exception as e:
        logger.warning(f"Safe connector failed: {e}")
    
    # –°–ø–æ—Å–æ–± 2: –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if connector is None:
        try:
            connector = aiohttp.TCPConnector(ssl=False)
            logger.debug("Created basic connector")
        except Exception as e:
            logger.warning(f"Basic connector failed: {e}")
    
    # –°–ø–æ—Å–æ–± 3: –°–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω–Ω–µ–∫—Ç–æ—Ä
    if connector is None:
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è aiohttp
            import os
            os.environ['AIOHTTP_NO_EXTENSIONS'] = '1'
            connector = aiohttp.TCPConnector()
            logger.debug("Created minimal connector")
        except Exception as e:
            logger.error(f"All connector methods failed: {e}")
            return None, None
    
    try:
        async with aiohttp.ClientSession(connector=connector) as session:
            connection_ok = await verify_fogo_connection(session)
            if not connection_ok:
                logger.error("‚ùå Failed to verify FOGO testnet connection. Check your internet connection.")
                return None, None
            return session, connector
    except Exception as e:
        logger.error(f"Failed to establish session: {e}")
        return None, None


async def load_configuration(config):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∫–æ—à–µ–ª—å–∫–∏ –∏ –ø—Ä–æ–∫—Å–∏)"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏
    keypairs = load_keypairs_from_file("private_key.txt")
    if not keypairs:
        logger.error("No keypairs loaded. Please check private_key.txt file.")
        return None, None
        
    logger.info(f"‚úÖ Loaded {len(keypairs)} keypairs")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–∫—Å–∏
    proxies = load_proxies("proxy.txt") if config['use_proxies'] else []
    if config['use_proxies']:
        logger.info(f"‚úÖ Loaded {len(proxies)} proxies")
    else:
        logger.info("‚ÑπÔ∏è  Running without proxies")
    
    return keypairs, proxies


async def pre_execution_checks(config, keypairs, proxies):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã"""
    connector_settings = get_platform_connector_settings()
    connector = aiohttp.TCPConnector(**connector_settings)
    
    async with aiohttp.ClientSession(connector=connector) as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if config['check_balances']:
            await check_wallets_balance(keypairs, session)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º airdrop –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if config['request_airdrops']:
            successful_airdrops = await request_multiple_airdrops(session, keypairs, proxies)
            if successful_airdrops > 0:
                logger.info("‚è≥ Waiting for airdrop confirmations...")

        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
        if config['check_balances'] or config['request_airdrops']:
            await check_wallets_balance(keypairs, session)


def print_execution_summary(config, keypairs):
    """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    print(f"\n{Fore.GREEN}üöÄ Starting execution...{Style.RESET_ALL}")
    print(f"üìä Configuration: {config['num_swaps']} swaps per wallet, {config['min_delay']}-{config['max_delay']}s delays")
    print(f"üë• Workers: {len(keypairs)} wallet(s)")
    print(f"üîó Proxies: {'Enabled' if config['use_proxies'] else 'Disabled'}")
    print(f"üí∞ Airdrops: {'Requested' if config['request_airdrops'] else 'Skipped'}")
    print(f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –í—ã–≤–æ–¥–∏–º –±–∞–Ω–Ω–µ—Ä
        print_banner(get_transaction_type())
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        config = get_user_configuration()
        if not config:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏
        session, connector = await setup_network_connection()
        if not session:
            return
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        keypairs, proxies = await load_configuration(config)
        if not keypairs:
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        await pre_execution_checks(config, keypairs, proxies)
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º
        print_execution_summary(config, keypairs)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
        stats = await run_multiple_workers(
            keypairs, 
            config['num_swaps'], 
            config['min_delay'], 
            config['max_delay'], 
            proxies
        )
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print_final_statistics(stats)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if config['check_balances'] or config['request_airdrops']:
            print(f"\n{Fore.CYAN}üìä Final wallet status:{Style.RESET_ALL}")
            connector_settings = get_platform_connector_settings()
            connector = aiohttp.TCPConnector(**connector_settings)
            async with aiohttp.ClientSession(connector=connector) as session:
                await check_wallets_balance(keypairs, session)

    except KeyboardInterrupt:
        logger.info(f"\n{Fore.RED}‚ö†Ô∏è  Script interrupted by user{Style.RESET_ALL}")
    except Exception as e:
        logger.error(f"üí• Unexpected error: {e}")
        import traceback
        traceback.print_exc()


def setup_windows_event_loop():
    """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows"""
    if platform.system() == "Windows":
        try:
            # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º SelectorEventLoop (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è aiodns)
            loop = asyncio.SelectorEventLoop()
            asyncio.set_event_loop(loop)
            logger.debug("Set SelectorEventLoop for Windows")
        except Exception as e:
            logger.debug(f"Failed to set SelectorEventLoop: {e}")
            # Fallback: –ø—Ä–æ–±—É–µ–º ProactorEventLoop
            try:
                loop = asyncio.ProactorEventLoop()
                asyncio.set_event_loop(loop)
                logger.debug("Fallback to ProactorEventLoop")
            except Exception as e2:
                logger.debug(f"Failed to set ProactorEventLoop: {e2}")


if __name__ == "__main__":
    print(f"{Fore.GREEN}Starting FOGO Network Bot {VERSION}...{Style.RESET_ALL}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è Windows
    setup_windows_event_loop()
    
    try:
        asyncio.run(main())
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")
        import traceback
        traceback.print_exc()
        input("Press Enter to exit...")